--- net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1,19 +1,26 @@
 package net.minecraft.server.network;
 
+import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.ints.Int2ShortMap;
 import it.unimi.dsi.fastutil.ints.Int2ShortOpenHashMap;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Optional;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiFunction;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -26,11 +33,10 @@
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
@@ -188,10 +194,15 @@
       this.server = var1;
       this.connection = var2;
       var2.setListener(this);
       this.player = var3;
       var3.connection = this;
+      TextFilter var4 = var3.getTextFilter();
+      if (var4 != null) {
+         var4.join();
+      }
+
    }
 
    public void tick() {
       this.resetPosition();
       this.player.xo = this.player.getX();
@@ -288,10 +299,41 @@
       this.connection.setReadOnly();
       Connection var10001 = this.connection;
       this.server.executeBlocking(var10001::handleDisconnection);
    }
 
+   private <T> void filterTextPacket(T var1, Consumer<T> var2, BiFunction<TextFilter, T, CompletableFuture<Optional<T>>> var3) {
+      MinecraftServer var4 = this.player.getLevel().getServer();
+      Consumer var5 = (var2x) -> {
+         if (this.getConnection().isConnected()) {
+            var2.accept(var2x);
+         } else {
+            LOGGER.debug("Ignoring packet due to disconnection");
+         }
+
+      };
+      TextFilter var6 = this.player.getTextFilter();
+      if (var6 != null) {
+         ((CompletableFuture)var3.apply(var6, var1)).thenAcceptAsync((var1x) -> {
+            var1x.ifPresent(var5);
+         }, var4);
+      } else {
+         var4.execute(() -> {
+            var5.accept(var1);
+         });
+      }
+
+   }
+
+   private void filterTextPacket(String var1, Consumer<String> var2) {
+      this.filterTextPacket(var1, var2, TextFilter::processStreamMessage);
+   }
+
+   private void filterTextPacket(List<String> var1, Consumer<List<String>> var2) {
+      this.filterTextPacket(var1, var2, TextFilter::processMessageBundle);
+   }
+
    public void handlePlayerInput(ServerboundPlayerInputPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (ServerLevel)this.player.getLevel());
       this.player.setPlayerInput(var1.getXxa(), var1.getZza(), var1.isJumping(), var1.isShiftKeyDown());
    }
 
@@ -637,42 +679,71 @@
       }
 
    }
 
    public void handleEditBook(ServerboundEditBookPacket var1) {
-      PacketUtils.ensureRunningOnSameThread(var1, this, (ServerLevel)this.player.getLevel());
       ItemStack var2 = var1.getBook();
-      if (!var2.isEmpty()) {
-         if (WritableBookItem.makeSureTagIsValid(var2.getTag())) {
-            ItemStack var3 = this.player.getItemInHand(var1.getHand());
-            if (var2.getItem() == Items.WRITABLE_BOOK && var3.getItem() == Items.WRITABLE_BOOK) {
-               if (var1.isSigning()) {
-                  ItemStack var4 = new ItemStack(Items.WRITTEN_BOOK);
-                  CompoundTag var5 = var3.getTag();
-                  if (var5 != null) {
-                     var4.setTag(var5.copy());
-                  }
+      if (var2.getItem() == Items.WRITABLE_BOOK) {
+         CompoundTag var3 = var2.getTag();
+         if (WritableBookItem.makeSureTagIsValid(var3)) {
+            ArrayList var4 = Lists.newArrayList();
+            boolean var5 = var1.isSigning();
+            if (var5) {
+               var4.add(var3.getString("title"));
+            }
 
-                  var4.addTagElement("author", StringTag.valueOf(this.player.getName().getString()));
-                  var4.addTagElement("title", StringTag.valueOf(var2.getTag().getString("title")));
-                  ListTag var6 = var2.getTag().getList("pages", 8);
+            ListTag var6 = var3.getList("pages", 8);
 
-                  for(int var7 = 0; var7 < var6.size(); ++var7) {
-                     String var8 = var6.getString(var7);
-                     TextComponent var9 = new TextComponent(var8);
-                     var8 = Component.Serializer.toJson(var9);
-                     var6.set(var7, (Tag)StringTag.valueOf(var8));
-                  }
+            int var7;
+            for(var7 = 0; var7 < var6.size(); ++var7) {
+               var4.add(var6.getString(var7));
+            }
 
-                  var4.addTagElement("pages", var6);
-                  this.player.setItemInHand(var1.getHand(), var4);
-               } else {
-                  var3.addTagElement("pages", var2.getTag().getList("pages", 8));
-               }
+            var7 = var1.getSlot();
+            if (Inventory.isHotbarSlot(var7) || var7 == 40) {
+               this.filterTextPacket((List)var4, var5 ? (var2x) -> {
+                  this.signBook((String)var2x.get(0), var2x.subList(1, var2x.size()), var7);
+               } : (var2x) -> {
+                  this.updateBookContents(var2x, var7);
+               });
             }
+         }
+      }
+   }
 
+   private void updateBookContents(List<String> var1, int var2) {
+      ItemStack var3 = this.player.inventory.getItem(var2);
+      if (var3.getItem() == Items.WRITABLE_BOOK) {
+         ListTag var4 = new ListTag();
+         var1.stream().map(StringTag::valueOf).forEach(var4::add);
+         var3.addTagElement("pages", var4);
+      }
+   }
+
+   private void signBook(String var1, List<String> var2, int var3) {
+      ItemStack var4 = this.player.inventory.getItem(var3);
+      if (var4.getItem() == Items.WRITABLE_BOOK) {
+         ItemStack var5 = new ItemStack(Items.WRITTEN_BOOK);
+         CompoundTag var6 = var4.getTag();
+         if (var6 != null) {
+            var5.setTag(var6.copy());
          }
+
+         var5.addTagElement("author", StringTag.valueOf(this.player.getName().getString()));
+         var5.addTagElement("title", StringTag.valueOf(var1));
+         ListTag var7 = new ListTag();
+         Iterator var8 = var2.iterator();
+
+         while(var8.hasNext()) {
+            String var9 = (String)var8.next();
+            TextComponent var10 = new TextComponent(var9);
+            String var11 = Component.Serializer.toJson(var10);
+            var7.add(StringTag.valueOf(var11));
+         }
+
+         var5.addTagElement("pages", var7);
+         this.player.inventory.setItem(var3, var5);
       }
    }
 
    public void handleEntityTagQuery(ServerboundEntityTagQuery var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (ServerLevel)this.player.getLevel());
@@ -958,10 +1029,15 @@
       LOGGER.info("{} lost connection: {}", this.player.getName().getString(), var1.getString());
       this.server.invalidateStatus();
       this.server.getPlayerList().broadcastMessage((new TranslatableComponent("multiplayer.player.left", new Object[]{this.player.getDisplayName()})).withStyle(ChatFormatting.YELLOW), ChatType.SYSTEM, Util.NIL_UUID);
       this.player.disconnect();
       this.server.getPlayerList().remove(this.player);
+      TextFilter var2 = this.player.getTextFilter();
+      if (var2 != null) {
+         var2.leave();
+      }
+
       if (this.isSingleplayerOwner()) {
          LOGGER.info("Stopping singleplayer server as player logged out");
          this.server.halt(false);
       }
 
@@ -1009,29 +1085,38 @@
          LOGGER.warn("{} tried to set an invalid carried item", this.player.getName().getString());
       }
    }
 
    public void handleChat(ServerboundChatPacket var1) {
-      PacketUtils.ensureRunningOnSameThread(var1, this, (ServerLevel)this.player.getLevel());
+      String var2 = StringUtils.normalizeSpace(var1.getMessage());
+      if (var2.startsWith("/")) {
+         PacketUtils.ensureRunningOnSameThread(var1, this, (ServerLevel)this.player.getLevel());
+         this.handleChat(var2);
+      } else {
+         this.filterTextPacket(var2, this::handleChat);
+      }
+
+   }
+
+   private void handleChat(String var1) {
       if (this.player.getChatVisibility() == ChatVisiblity.HIDDEN) {
          this.send(new ClientboundChatPacket((new TranslatableComponent("chat.cannotSend")).withStyle(ChatFormatting.RED), ChatType.SYSTEM, Util.NIL_UUID));
       } else {
          this.player.resetLastActionTime();
-         String var2 = StringUtils.normalizeSpace(var1.getMessage());
 
-         for(int var3 = 0; var3 < var2.length(); ++var3) {
-            if (!SharedConstants.isAllowedChatCharacter(var2.charAt(var3))) {
+         for(int var2 = 0; var2 < var1.length(); ++var2) {
+            if (!SharedConstants.isAllowedChatCharacter(var1.charAt(var2))) {
                this.disconnect(new TranslatableComponent("multiplayer.disconnect.illegal_characters"));
                return;
             }
          }
 
-         if (var2.startsWith("/")) {
-            this.handleCommand(var2);
+         if (var1.startsWith("/")) {
+            this.handleCommand(var1);
          } else {
-            TranslatableComponent var4 = new TranslatableComponent("chat.type.text", new Object[]{this.player.getDisplayName(), var2});
-            this.server.getPlayerList().broadcastMessage(var4, ChatType.CHAT, this.player.getUUID());
+            TranslatableComponent var3 = new TranslatableComponent("chat.type.text", new Object[]{this.player.getDisplayName(), var1});
+            this.server.getPlayerList().broadcastMessage(var3, ChatType.CHAT, this.player.getUUID());
          }
 
          this.chatSpamTickCount += 20;
          if (this.chatSpamTickCount > 200 && !this.server.getPlayerList().isOp(this.player.getGameProfile())) {
             this.disconnect(new TranslatableComponent("disconnect.spam"));
@@ -1277,35 +1362,39 @@
       }
 
    }
 
    public void handleSignUpdate(ServerboundSignUpdatePacket var1) {
-      PacketUtils.ensureRunningOnSameThread(var1, this, (ServerLevel)this.player.getLevel());
+      List var2 = (List)Stream.of(var1.getLines()).map(ChatFormatting::stripFormatting).collect(Collectors.toList());
+      this.filterTextPacket(var2, (var2x) -> {
+         this.updateSignText(var1, var2x);
+      });
+   }
+
+   private void updateSignText(ServerboundSignUpdatePacket var1, List<String> var2) {
       this.player.resetLastActionTime();
-      ServerLevel var2 = this.player.getLevel();
-      BlockPos var3 = var1.getPos();
-      if (var2.hasChunkAt(var3)) {
-         BlockState var4 = var2.getBlockState(var3);
-         BlockEntity var5 = var2.getBlockEntity(var3);
-         if (!(var5 instanceof SignBlockEntity)) {
+      ServerLevel var3 = this.player.getLevel();
+      BlockPos var4 = var1.getPos();
+      if (var3.hasChunkAt(var4)) {
+         BlockState var5 = var3.getBlockState(var4);
+         BlockEntity var6 = var3.getBlockEntity(var4);
+         if (!(var6 instanceof SignBlockEntity)) {
             return;
          }
 
-         SignBlockEntity var6 = (SignBlockEntity)var5;
-         if (!var6.isEditable() || var6.getPlayerWhoMayEdit() != this.player) {
+         SignBlockEntity var7 = (SignBlockEntity)var6;
+         if (!var7.isEditable() || var7.getPlayerWhoMayEdit() != this.player) {
             LOGGER.warn("Player {} just tried to change non-editable sign", this.player.getName().getString());
             return;
          }
 
-         String[] var7 = var1.getLines();
-
-         for(int var8 = 0; var8 < var7.length; ++var8) {
-            var6.setMessage(var8, new TextComponent(ChatFormatting.stripFormatting(var7[var8])));
+         for(int var8 = 0; var8 < var2.size(); ++var8) {
+            var7.setMessage(var8, new TextComponent((String)var2.get(var8)));
          }
 
-         var6.setChanged();
-         var2.sendBlockUpdated(var3, var4, var4, 3);
+         var7.setChanged();
+         var3.sendBlockUpdated(var4, var5, var5, 3);
       }
 
    }
 
    public void handleKeepAlive(ServerboundKeepAlivePacket var1) {
