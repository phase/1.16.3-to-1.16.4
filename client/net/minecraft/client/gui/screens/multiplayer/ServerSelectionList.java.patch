--- net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -46,12 +46,11 @@
    private static final ResourceLocation ICON_MISSING;
    private static final ResourceLocation ICON_OVERLAY_LOCATION;
    private static final Component SCANNING_LABEL;
    private static final Component CANT_RESOLVE_TEXT;
    private static final Component CANT_CONNECT_TEXT;
-   private static final Component CLIENT_OUT_OF_DATE_TOOLTIP;
-   private static final Component SERVER_OUT_OF_DATE_TOOLTIP;
+   private static final Component INCOMPATIBLE_TOOLTIP;
    private static final Component NO_CONNECTION_TOOLTIP;
    private static final Component PINGING_TOOLTIP;
    private final JoinMultiplayerScreen screen;
    private final List<ServerSelectionList.OnlineServerEntry> onlineServers = Lists.newArrayList();
    private final ServerSelectionList.Entry lanHeader = new ServerSelectionList.LANHeader();
@@ -128,12 +127,11 @@
       ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
       ICON_OVERLAY_LOCATION = new ResourceLocation("textures/gui/server_selection.png");
       SCANNING_LABEL = new TranslatableComponent("lanServer.scanning");
       CANT_RESOLVE_TEXT = (new TranslatableComponent("multiplayer.status.cannot_resolve")).withStyle(ChatFormatting.DARK_RED);
       CANT_CONNECT_TEXT = (new TranslatableComponent("multiplayer.status.cannot_connect")).withStyle(ChatFormatting.DARK_RED);
-      CLIENT_OUT_OF_DATE_TOOLTIP = new TranslatableComponent("multiplayer.status.client_out_of_date");
-      SERVER_OUT_OF_DATE_TOOLTIP = new TranslatableComponent("multiplayer.status.server_out_of_date");
+      INCOMPATIBLE_TOOLTIP = new TranslatableComponent("multiplayer.status.incompatible");
       NO_CONNECTION_TOOLTIP = new TranslatableComponent("multiplayer.status.no_connection");
       PINGING_TOOLTIP = new TranslatableComponent("multiplayer.status.pinging");
    }
 
    public class OnlineServerEntry extends ServerSelectionList.Entry {
@@ -173,76 +171,74 @@
                }
 
             });
          }
 
-         boolean var11 = this.serverData.protocol > SharedConstants.getCurrentVersion().getProtocolVersion();
-         boolean var12 = this.serverData.protocol < SharedConstants.getCurrentVersion().getProtocolVersion();
-         boolean var13 = var11 || var12;
+         boolean var11 = this.serverData.protocol != SharedConstants.getCurrentVersion().getProtocolVersion();
          this.minecraft.font.draw(var1, this.serverData.name, (float)(var4 + 32 + 3), (float)(var3 + 1), 16777215);
-         List var14 = this.minecraft.font.split(this.serverData.motd, var5 - 32 - 2);
+         List var12 = this.minecraft.font.split(this.serverData.motd, var5 - 32 - 2);
 
-         for(int var15 = 0; var15 < Math.min(var14.size(), 2); ++var15) {
+         for(int var13 = 0; var13 < Math.min(var12.size(), 2); ++var13) {
             Font var10000 = this.minecraft.font;
-            FormattedCharSequence var10002 = (FormattedCharSequence)var14.get(var15);
+            FormattedCharSequence var10002 = (FormattedCharSequence)var12.get(var13);
             float var10003 = (float)(var4 + 32 + 3);
             int var10004 = var3 + 12;
             this.minecraft.font.getClass();
-            var10000.draw(var1, var10002, var10003, (float)(var10004 + 9 * var15), 8421504);
+            var10000.draw(var1, var10002, var10003, (float)(var10004 + 9 * var13), 8421504);
          }
 
-         Object var26 = var13 ? this.serverData.version.copy().withStyle(ChatFormatting.DARK_RED) : this.serverData.status;
-         int var16 = this.minecraft.font.width((FormattedText)var26);
-         this.minecraft.font.draw(var1, (Component)var26, (float)(var4 + var5 - var16 - 15 - 2), (float)(var3 + 1), 8421504);
-         byte var17 = 0;
-         int var18;
-         List var19;
-         Object var20;
-         if (var13) {
-            var18 = 5;
-            var20 = var11 ? ServerSelectionList.CLIENT_OUT_OF_DATE_TOOLTIP : ServerSelectionList.SERVER_OUT_OF_DATE_TOOLTIP;
-            var19 = this.serverData.playerList;
+         Object var24 = var11 ? this.serverData.version.copy().withStyle(ChatFormatting.RED) : this.serverData.status;
+         int var14 = this.minecraft.font.width((FormattedText)var24);
+         this.minecraft.font.draw(var1, (Component)var24, (float)(var4 + var5 - var14 - 15 - 2), (float)(var3 + 1), 8421504);
+         byte var15 = 0;
+         int var16;
+         List var17;
+         Object var18;
+         if (var11) {
+            var16 = 5;
+            var18 = ServerSelectionList.INCOMPATIBLE_TOOLTIP;
+            var17 = this.serverData.playerList;
          } else if (this.serverData.pinged && this.serverData.ping != -2L) {
             if (this.serverData.ping < 0L) {
-               var18 = 5;
+               var16 = 5;
             } else if (this.serverData.ping < 150L) {
-               var18 = 0;
+               var16 = 0;
             } else if (this.serverData.ping < 300L) {
-               var18 = 1;
+               var16 = 1;
             } else if (this.serverData.ping < 600L) {
-               var18 = 2;
+               var16 = 2;
             } else if (this.serverData.ping < 1000L) {
-               var18 = 3;
+               var16 = 3;
             } else {
-               var18 = 4;
+               var16 = 4;
             }
 
             if (this.serverData.ping < 0L) {
-               var20 = ServerSelectionList.NO_CONNECTION_TOOLTIP;
-               var19 = Collections.emptyList();
+               var18 = ServerSelectionList.NO_CONNECTION_TOOLTIP;
+               var17 = Collections.emptyList();
             } else {
-               var20 = new TranslatableComponent("multiplayer.status.ping", new Object[]{this.serverData.ping});
-               var19 = this.serverData.playerList;
+               var18 = new TranslatableComponent("multiplayer.status.ping", new Object[]{this.serverData.ping});
+               var17 = this.serverData.playerList;
             }
          } else {
-            var17 = 1;
-            var18 = (int)(Util.getMillis() / 100L + (long)(var2 * 2) & 7L);
-            if (var18 > 4) {
-               var18 = 8 - var18;
+            var15 = 1;
+            var16 = (int)(Util.getMillis() / 100L + (long)(var2 * 2) & 7L);
+            if (var16 > 4) {
+               var16 = 8 - var16;
             }
 
-            var20 = ServerSelectionList.PINGING_TOOLTIP;
-            var19 = Collections.emptyList();
+            var18 = ServerSelectionList.PINGING_TOOLTIP;
+            var17 = Collections.emptyList();
          }
 
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
          this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
-         GuiComponent.blit(var1, var4 + var5 - 15, var3, (float)(var17 * 10), (float)(176 + var18 * 8), 10, 8, 256, 256);
-         String var21 = this.serverData.getIconB64();
-         if (!Objects.equals(var21, this.lastIconB64)) {
-            if (this.uploadServerIcon(var21)) {
-               this.lastIconB64 = var21;
+         GuiComponent.blit(var1, var4 + var5 - 15, var3, (float)(var15 * 10), (float)(176 + var16 * 8), 10, 8, 256, 256);
+         String var19 = this.serverData.getIconB64();
+         if (!Objects.equals(var19, this.lastIconB64)) {
+            if (this.uploadServerIcon(var19)) {
+               this.lastIconB64 = var19;
             } else {
                this.serverData.setIconB64((String)null);
                this.updateServerList();
             }
          }
@@ -251,42 +247,42 @@
             this.drawIcon(var1, var4, var3, this.iconLocation);
          } else {
             this.drawIcon(var1, var4, var3, ServerSelectionList.ICON_MISSING);
          }
 
-         int var22 = var7 - var4;
-         int var23 = var8 - var3;
-         if (var22 >= var5 - 15 && var22 <= var5 - 5 && var23 >= 0 && var23 <= 8) {
-            this.screen.setToolTip(Collections.singletonList(var20));
-         } else if (var22 >= var5 - var16 - 15 - 2 && var22 <= var5 - 15 - 2 && var23 >= 0 && var23 <= 8) {
-            this.screen.setToolTip(var19);
+         int var20 = var7 - var4;
+         int var21 = var8 - var3;
+         if (var20 >= var5 - 15 && var20 <= var5 - 5 && var21 >= 0 && var21 <= 8) {
+            this.screen.setToolTip(Collections.singletonList(var18));
+         } else if (var20 >= var5 - var14 - 15 - 2 && var20 <= var5 - 15 - 2 && var21 >= 0 && var21 <= 8) {
+            this.screen.setToolTip(var17);
          }
 
          if (this.minecraft.options.touchscreen || var9) {
             this.minecraft.getTextureManager().bind(ServerSelectionList.ICON_OVERLAY_LOCATION);
             GuiComponent.fill(var1, var4, var3, var4 + 32, var3 + 32, -1601138544);
             RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-            int var24 = var7 - var4;
-            int var25 = var8 - var3;
+            int var22 = var7 - var4;
+            int var23 = var8 - var3;
             if (this.canJoin()) {
-               if (var24 < 32 && var24 > 16) {
+               if (var22 < 32 && var22 > 16) {
                   GuiComponent.blit(var1, var4, var3, 0.0F, 32.0F, 32, 32, 256, 256);
                } else {
                   GuiComponent.blit(var1, var4, var3, 0.0F, 0.0F, 32, 32, 256, 256);
                }
             }
 
             if (var2 > 0) {
-               if (var24 < 16 && var25 < 16) {
+               if (var22 < 16 && var23 < 16) {
                   GuiComponent.blit(var1, var4, var3, 96.0F, 32.0F, 32, 32, 256, 256);
                } else {
                   GuiComponent.blit(var1, var4, var3, 96.0F, 0.0F, 32, 32, 256, 256);
                }
             }
 
             if (var2 < this.screen.getServers().size() - 1) {
-               if (var24 < 16 && var25 > 16) {
+               if (var22 < 16 && var23 > 16) {
                   GuiComponent.blit(var1, var4, var3, 64.0F, 32.0F, 32, 32, 256, 256);
                } else {
                   GuiComponent.blit(var1, var4, var3, 64.0F, 0.0F, 32, 32, 256, 256);
                }
             }
