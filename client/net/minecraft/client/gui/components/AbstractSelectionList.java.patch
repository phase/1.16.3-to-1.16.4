--- net/minecraft/client/gui/components/AbstractSelectionList.java
+++ net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -34,10 +34,12 @@
    private boolean renderSelection = true;
    private boolean renderHeader;
    protected int headerHeight;
    private boolean scrolling;
    private E selected;
+   private boolean renderBackground = true;
+   private boolean renderTopAndBottom = true;
 
    public AbstractSelectionList(Minecraft var1, int var2, int var3, int var4, int var5, int var6) {
       this.minecraft = var1;
       this.width = var2;
       this.height = var3;
@@ -72,10 +74,18 @@
 
    public void setSelected(@Nullable E var1) {
       this.selected = var1;
    }
 
+   public void setRenderBackground(boolean var1) {
+      this.renderBackground = var1;
+   }
+
+   public void setRenderTopAndBottom(boolean var1) {
+      this.renderTopAndBottom = var1;
+   }
+
    @Nullable
    public E getFocused() {
       return (AbstractSelectionList.Entry)super.getFocused();
    }
 
@@ -154,61 +164,68 @@
       this.renderBackground(var1);
       int var5 = this.getScrollbarPosition();
       int var6 = var5 + 6;
       Tesselator var7 = Tesselator.getInstance();
       BufferBuilder var8 = var7.getBuilder();
-      this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      float var9 = 32.0F;
-      var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-      var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
-      var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
-      var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
-      var8.vertex((double)this.x0, (double)this.y0, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
-      var7.end();
-      int var10 = this.getRowLeft();
-      int var11 = this.y0 + 4 - (int)this.getScrollAmount();
+      if (this.renderBackground) {
+         this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
+         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         float var9 = 32.0F;
+         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
+         var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
+         var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.y0, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
+         var7.end();
+      }
+
+      int var14 = this.getRowLeft();
+      int var10 = this.y0 + 4 - (int)this.getScrollAmount();
       if (this.renderHeader) {
-         this.renderHeader(var1, var10, var11, var7);
+         this.renderHeader(var1, var14, var10, var7);
       }
 
-      this.renderList(var1, var10, var11, var2, var3, var4);
-      this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
-      RenderSystem.enableDepthTest();
-      RenderSystem.depthFunc(519);
-      float var12 = 32.0F;
-      boolean var13 = true;
-      var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-      var8.vertex((double)this.x0, (double)this.y0, -100.0D).uv(0.0F, (float)this.y0 / 32.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)(this.x0 + this.width), (double)this.y0, -100.0D).uv((float)this.width / 32.0F, (float)this.y0 / 32.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)(this.x0 + this.width), 0.0D, -100.0D).uv((float)this.width / 32.0F, 0.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)this.x0, 0.0D, -100.0D).uv(0.0F, 0.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)this.x0, (double)this.height, -100.0D).uv(0.0F, (float)this.height / 32.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)(this.x0 + this.width), (double)this.height, -100.0D).uv((float)this.width / 32.0F, (float)this.height / 32.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)(this.x0 + this.width), (double)this.y1, -100.0D).uv((float)this.width / 32.0F, (float)this.y1 / 32.0F).color(64, 64, 64, 255).endVertex();
-      var8.vertex((double)this.x0, (double)this.y1, -100.0D).uv(0.0F, (float)this.y1 / 32.0F).color(64, 64, 64, 255).endVertex();
-      var7.end();
-      RenderSystem.depthFunc(515);
-      RenderSystem.disableDepthTest();
-      RenderSystem.enableBlend();
-      RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE);
-      RenderSystem.disableAlphaTest();
-      RenderSystem.shadeModel(7425);
-      RenderSystem.disableTexture();
-      boolean var14 = true;
-      var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
-      var8.vertex((double)this.x0, (double)(this.y0 + 4), 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 0).endVertex();
-      var8.vertex((double)this.x1, (double)(this.y0 + 4), 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 0).endVertex();
-      var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 255).endVertex();
-      var8.vertex((double)this.x0, (double)this.y0, 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 255).endVertex();
-      var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 255).endVertex();
-      var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 255).endVertex();
-      var8.vertex((double)this.x1, (double)(this.y1 - 4), 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 0).endVertex();
-      var8.vertex((double)this.x0, (double)(this.y1 - 4), 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 0).endVertex();
-      var7.end();
+      this.renderList(var1, var14, var10, var2, var3, var4);
+      if (this.renderTopAndBottom) {
+         this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
+         RenderSystem.enableDepthTest();
+         RenderSystem.depthFunc(519);
+         float var11 = 32.0F;
+         boolean var12 = true;
+         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var8.vertex((double)this.x0, (double)this.y0, -100.0D).uv(0.0F, (float)this.y0 / 32.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)(this.x0 + this.width), (double)this.y0, -100.0D).uv((float)this.width / 32.0F, (float)this.y0 / 32.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)(this.x0 + this.width), 0.0D, -100.0D).uv((float)this.width / 32.0F, 0.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)this.x0, 0.0D, -100.0D).uv(0.0F, 0.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.height, -100.0D).uv(0.0F, (float)this.height / 32.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)(this.x0 + this.width), (double)this.height, -100.0D).uv((float)this.width / 32.0F, (float)this.height / 32.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)(this.x0 + this.width), (double)this.y1, -100.0D).uv((float)this.width / 32.0F, (float)this.y1 / 32.0F).color(64, 64, 64, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.y1, -100.0D).uv(0.0F, (float)this.y1 / 32.0F).color(64, 64, 64, 255).endVertex();
+         var7.end();
+         RenderSystem.depthFunc(515);
+         RenderSystem.disableDepthTest();
+         RenderSystem.enableBlend();
+         RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE);
+         RenderSystem.disableAlphaTest();
+         RenderSystem.shadeModel(7425);
+         RenderSystem.disableTexture();
+         boolean var13 = true;
+         var8.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
+         var8.vertex((double)this.x0, (double)(this.y0 + 4), 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 0).endVertex();
+         var8.vertex((double)this.x1, (double)(this.y0 + 4), 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 0).endVertex();
+         var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.y0, 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 255).endVertex();
+         var8.vertex((double)this.x1, (double)(this.y1 - 4), 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 0).endVertex();
+         var8.vertex((double)this.x0, (double)(this.y1 - 4), 0.0D).uv(0.0F, 0.0F).color(0, 0, 0, 0).endVertex();
+         var7.end();
+      }
+
       int var15 = this.getMaxScroll();
       if (var15 > 0) {
+         RenderSystem.disableTexture();
          int var16 = (int)((float)((this.y1 - this.y0) * (this.y1 - this.y0)) / (float)this.getMaxPosition());
          var16 = Mth.clamp(var16, 32, this.y1 - this.y0 - 8);
          int var17 = (int)this.getScrollAmount() * (this.y1 - this.y0 - var16) / var15 + this.y0;
          if (var17 < this.y0) {
             var17 = this.y0;
@@ -265,11 +282,11 @@
 
    public void setScrollAmount(double var1) {
       this.scrollAmount = Mth.clamp(var1, 0.0D, (double)this.getMaxScroll());
    }
 
-   private int getMaxScroll() {
+   public int getMaxScroll() {
       return Math.max(0, this.getMaxPosition() - (this.y1 - this.y0 - 4));
    }
 
    protected void updateScrollingState(double var1, double var3, int var5) {
       this.scrolling = var5 == 0 && var1 >= (double)this.getScrollbarPosition() && var1 < (double)(this.getScrollbarPosition() + 6);
@@ -433,14 +450,18 @@
          }
       }
 
    }
 
-   protected int getRowLeft() {
+   public int getRowLeft() {
       return this.x0 + this.width / 2 - this.getRowWidth() / 2 + 2;
    }
 
+   public int getRowRight() {
+      return this.getRowLeft() + this.getRowWidth();
+   }
+
    protected int getRowTop(int var1) {
       return this.y0 + 4 - (int)this.getScrollAmount() + var1 * this.itemHeight + this.headerHeight;
    }
 
    private int getRowBottom(int var1) {
