--- net/minecraft/client/Options.java
+++ net/minecraft/client/Options.java
@@ -80,10 +80,11 @@
    public int mipmapLevels;
    private final Map<SoundSource, Float> sourceVolumes;
    public boolean useNativeTransport;
    public AttackIndicatorStatus attackIndicator;
    public TutorialSteps tutorialStep;
+   public boolean joinedFirstServer;
    public int biomeBlendRadius;
    public double mouseWheelSensitivity;
    public boolean rawMouseInput;
    public int glDebugVerbosity;
    public boolean autoJump;
@@ -105,10 +106,11 @@
    public boolean fullscreen;
    public boolean bobView;
    public boolean toggleCrouch;
    public boolean toggleSprint;
    public boolean skipMultiplayerWarning;
+   public boolean hideMatchedNames;
    public final KeyMapping keyUp;
    public final KeyMapping keyLeft;
    public final KeyMapping keyDown;
    public final KeyMapping keyRight;
    public final KeyMapping keyJump;
@@ -121,10 +123,11 @@
    public final KeyMapping keyAttack;
    public final KeyMapping keyPickItem;
    public final KeyMapping keyChat;
    public final KeyMapping keyPlayerList;
    public final KeyMapping keyCommand;
+   public final KeyMapping keySocialInteractions;
    public final KeyMapping keyScreenshot;
    public final KeyMapping keyTogglePerspective;
    public final KeyMapping keySmoothCamera;
    public final KeyMapping keyFullscreen;
    public final KeyMapping keySpectatorOutlines;
@@ -175,10 +178,11 @@
       this.mipmapLevels = 4;
       this.sourceVolumes = Maps.newEnumMap(SoundSource.class);
       this.useNativeTransport = true;
       this.attackIndicator = AttackIndicatorStatus.CROSSHAIR;
       this.tutorialStep = TutorialSteps.MOVEMENT;
+      this.joinedFirstServer = false;
       this.biomeBlendRadius = 2;
       this.mouseWheelSensitivity = 1.0D;
       this.rawMouseInput = true;
       this.glDebugVerbosity = 1;
       this.autoJump = true;
@@ -190,10 +194,11 @@
       this.entityShadows = true;
       this.realmsNotifications = true;
       this.snooperEnabled = true;
       this.backgroundForChatOnly = true;
       this.bobView = true;
+      this.hideMatchedNames = true;
       this.keyUp = new KeyMapping("key.forward", 87, "key.categories.movement");
       this.keyLeft = new KeyMapping("key.left", 65, "key.categories.movement");
       this.keyDown = new KeyMapping("key.back", 83, "key.categories.movement");
       this.keyRight = new KeyMapping("key.right", 68, "key.categories.movement");
       this.keyJump = new KeyMapping("key.jump", 32, "key.categories.movement");
@@ -210,20 +215,21 @@
       this.keyAttack = new KeyMapping("key.attack", InputConstants.Type.MOUSE, 0, "key.categories.gameplay");
       this.keyPickItem = new KeyMapping("key.pickItem", InputConstants.Type.MOUSE, 2, "key.categories.gameplay");
       this.keyChat = new KeyMapping("key.chat", 84, "key.categories.multiplayer");
       this.keyPlayerList = new KeyMapping("key.playerlist", 258, "key.categories.multiplayer");
       this.keyCommand = new KeyMapping("key.command", 47, "key.categories.multiplayer");
+      this.keySocialInteractions = new KeyMapping("key.socialInteractions", 80, "key.categories.multiplayer");
       this.keyScreenshot = new KeyMapping("key.screenshot", 291, "key.categories.misc");
       this.keyTogglePerspective = new KeyMapping("key.togglePerspective", 294, "key.categories.misc");
       this.keySmoothCamera = new KeyMapping("key.smoothCamera", InputConstants.UNKNOWN.getValue(), "key.categories.misc");
       this.keyFullscreen = new KeyMapping("key.fullscreen", 300, "key.categories.misc");
       this.keySpectatorOutlines = new KeyMapping("key.spectatorOutlines", InputConstants.UNKNOWN.getValue(), "key.categories.misc");
       this.keyAdvancements = new KeyMapping("key.advancements", 76, "key.categories.misc");
       this.keyHotbarSlots = new KeyMapping[]{new KeyMapping("key.hotbar.1", 49, "key.categories.inventory"), new KeyMapping("key.hotbar.2", 50, "key.categories.inventory"), new KeyMapping("key.hotbar.3", 51, "key.categories.inventory"), new KeyMapping("key.hotbar.4", 52, "key.categories.inventory"), new KeyMapping("key.hotbar.5", 53, "key.categories.inventory"), new KeyMapping("key.hotbar.6", 54, "key.categories.inventory"), new KeyMapping("key.hotbar.7", 55, "key.categories.inventory"), new KeyMapping("key.hotbar.8", 56, "key.categories.inventory"), new KeyMapping("key.hotbar.9", 57, "key.categories.inventory")};
       this.keySaveHotbarActivator = new KeyMapping("key.saveToolbarActivator", 67, "key.categories.creative");
       this.keyLoadHotbarActivator = new KeyMapping("key.loadToolbarActivator", 88, "key.categories.creative");
-      this.keyMappings = (KeyMapping[])ArrayUtils.addAll(new KeyMapping[]{this.keyAttack, this.keyUse, this.keyUp, this.keyLeft, this.keyDown, this.keyRight, this.keyJump, this.keyShift, this.keySprint, this.keyDrop, this.keyInventory, this.keyChat, this.keyPlayerList, this.keyPickItem, this.keyCommand, this.keyScreenshot, this.keyTogglePerspective, this.keySmoothCamera, this.keyFullscreen, this.keySpectatorOutlines, this.keySwapOffhand, this.keySaveHotbarActivator, this.keyLoadHotbarActivator, this.keyAdvancements}, this.keyHotbarSlots);
+      this.keyMappings = (KeyMapping[])ArrayUtils.addAll(new KeyMapping[]{this.keyAttack, this.keyUse, this.keyUp, this.keyLeft, this.keyDown, this.keyRight, this.keyJump, this.keyShift, this.keySprint, this.keyDrop, this.keyInventory, this.keyChat, this.keyPlayerList, this.keyPickItem, this.keyCommand, this.keySocialInteractions, this.keyScreenshot, this.keyTogglePerspective, this.keySmoothCamera, this.keyFullscreen, this.keySpectatorOutlines, this.keySwapOffhand, this.keySaveHotbarActivator, this.keyLoadHotbarActivator, this.keyAdvancements}, this.keyHotbarSlots);
       this.difficulty = Difficulty.NORMAL;
       this.cameraType = CameraType.FIRST_PERSON;
       this.lastMpIp = "";
       this.fov = 70.0D;
       this.screenEffectScale = 1.0F;
@@ -595,10 +601,18 @@
 
                if ("skipMultiplayerWarning".equals(var4)) {
                   this.skipMultiplayerWarning = "true".equals(var5);
                }
 
+               if ("hideMatchedNames".equals(var4)) {
+                  this.hideMatchedNames = "true".equals(var5);
+               }
+
+               if ("joinedFirstServer".equals(var4)) {
+                  this.joinedFirstServer = "true".equals(var5);
+               }
+
                if ("syncChunkWrites".equals(var4)) {
                   this.syncWrites = "true".equals(var5);
                }
 
                KeyMapping[] var6 = this.keyMappings;
@@ -745,10 +759,12 @@
             var1.println("tutorialStep:" + this.tutorialStep.getName());
             var1.println("mouseWheelSensitivity:" + this.mouseWheelSensitivity);
             var1.println("rawMouseInput:" + Option.RAW_MOUSE_INPUT.get(this));
             var1.println("glDebugVerbosity:" + this.glDebugVerbosity);
             var1.println("skipMultiplayerWarning:" + this.skipMultiplayerWarning);
+            var1.println("hideMatchedNames:" + this.hideMatchedNames);
+            var1.println("joinedFirstServer:" + this.joinedFirstServer);
             var1.println("syncChunkWrites:" + this.syncWrites);
             KeyMapping[] var3 = this.keyMappings;
             int var4 = var3.length;
 
             int var5;
