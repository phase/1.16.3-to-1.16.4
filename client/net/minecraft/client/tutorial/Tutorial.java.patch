--- net/minecraft/client/tutorial/Tutorial.java
+++ net/minecraft/client/tutorial/Tutorial.java
@@ -1,10 +1,13 @@
 package net.minecraft.client.tutorial;
 
+import com.google.common.collect.Lists;
+import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.toasts.TutorialToast;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.player.Input;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.KeybindComponent;
@@ -15,10 +18,11 @@
 
 public class Tutorial {
    private final Minecraft minecraft;
    @Nullable
    private TutorialStepInstance instance;
+   private List<Tutorial.TimedToast> timedToasts = Lists.newArrayList();
 
    public Tutorial(Minecraft var1) {
       this.minecraft = var1;
    }
 
@@ -77,11 +81,26 @@
       }
 
       this.instance = this.minecraft.options.tutorialStep.create(this);
    }
 
+   public void addTimedToast(TutorialToast var1, int var2) {
+      this.timedToasts.add(new Tutorial.TimedToast(var1, var2));
+      this.minecraft.getToasts().addToast(var1);
+   }
+
+   public void removeTimedToast(TutorialToast var1) {
+      this.timedToasts.removeIf((var1x) -> {
+         return var1x.toast == var1;
+      });
+      var1.hide();
+   }
+
    public void tick() {
+      this.timedToasts.removeIf((var0) -> {
+         return ((Tutorial.TimedToast)var0).updateProgress();
+      });
       if (this.instance != null) {
          if (this.minecraft.level != null) {
             this.instance.tick();
          } else {
             this.stop();
@@ -111,6 +130,27 @@
    }
 
    public static Component key(String var0) {
       return (new KeybindComponent("key." + var0)).withStyle(ChatFormatting.BOLD);
    }
+
+   static final class TimedToast {
+      private final TutorialToast toast;
+      private final int durationTicks;
+      private int progress;
+
+      private TimedToast(TutorialToast var1, int var2) {
+         this.toast = var1;
+         this.durationTicks = var2;
+      }
+
+      private boolean updateProgress() {
+         this.toast.updateProgress(Math.min((float)(++this.progress) / (float)this.durationTicks, 1.0F));
+         if (this.progress > this.durationTicks) {
+            this.toast.hide();
+            return true;
+         } else {
+            return false;
+         }
+      }
+   }
 }
