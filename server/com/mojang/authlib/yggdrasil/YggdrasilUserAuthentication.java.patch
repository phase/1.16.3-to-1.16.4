--- com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
+++ com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
@@ -31,26 +31,28 @@
    private final URL routeInvalidate;
    private final URL routeSignout;
    private static final String STORAGE_KEY_ACCESS_TOKEN = "accessToken";
    private final Agent agent;
    private GameProfile[] profiles;
+   private final String clientToken;
    private String accessToken;
    private boolean isOnline;
 
-   public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, Agent var2) {
-      this(var1, var2, YggdrasilEnvironment.PROD);
+   public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, String var2, Agent var3) {
+      this(var1, var2, var3, YggdrasilEnvironment.PROD);
    }
 
-   public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, Agent var2, Environment var3) {
+   public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, String var2, Agent var3, Environment var4) {
       super(var1);
-      this.agent = var2;
-      LOGGER.info("Environment: " + var3.getName(), ". AuthHost: " + var3.getAuthHost());
-      this.routeAuthenticate = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/authenticate");
-      this.routeRefresh = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/refresh");
-      this.routeValidate = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/validate");
-      this.routeInvalidate = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/invalidate");
-      this.routeSignout = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/signout");
+      this.clientToken = var2;
+      this.agent = var3;
+      LOGGER.info("Environment: " + var4.getName(), ". AuthHost: " + var4.getAuthHost());
+      this.routeAuthenticate = HttpAuthenticationService.constantURL(var4.getAuthHost() + "/authenticate");
+      this.routeRefresh = HttpAuthenticationService.constantURL(var4.getAuthHost() + "/refresh");
+      this.routeValidate = HttpAuthenticationService.constantURL(var4.getAuthHost() + "/validate");
+      this.routeInvalidate = HttpAuthenticationService.constantURL(var4.getAuthHost() + "/invalidate");
+      this.routeSignout = HttpAuthenticationService.constantURL(var4.getAuthHost() + "/signout");
    }
 
    public boolean canLogIn() {
       return !this.canPlayOnline() && StringUtils.isNotBlank(this.getUsername()) && (StringUtils.isNotBlank(this.getPassword()) || StringUtils.isNotBlank(this.getAuthenticatedToken()));
    }
@@ -77,13 +79,13 @@
          throw new InvalidCredentialsException("Invalid username");
       } else if (StringUtils.isBlank(this.getPassword())) {
          throw new InvalidCredentialsException("Invalid password");
       } else {
          LOGGER.info("Logging in with username & password");
-         AuthenticationRequest var1 = new AuthenticationRequest(this, this.getUsername(), this.getPassword());
+         AuthenticationRequest var1 = new AuthenticationRequest(this.getAgent(), this.getUsername(), this.getPassword(), this.clientToken);
          AuthenticationResponse var2 = (AuthenticationResponse)this.getAuthenticationService().makeRequest(this.routeAuthenticate, var1, AuthenticationResponse.class);
-         if (!var2.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
+         if (!var2.getClientToken().equals(this.clientToken)) {
             throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
          } else {
             if (var2.getSelectedProfile() != null) {
                this.setUserType(var2.getSelectedProfile().isLegacy() ? UserType.LEGACY : UserType.MOJANG);
             } else if (ArrayUtils.isNotEmpty((Object[])var2.getAvailableProfiles())) {
@@ -131,13 +133,13 @@
          LOGGER.info("Logging in with access token");
          if (this.checkTokenValidity()) {
             LOGGER.debug("Skipping refresh call as we're safely logged in.");
             this.isOnline = true;
          } else {
-            RefreshRequest var1 = new RefreshRequest(this);
+            RefreshRequest var1 = new RefreshRequest(this.getAuthenticatedToken(), this.clientToken);
             RefreshResponse var2 = (RefreshResponse)this.getAuthenticationService().makeRequest(this.routeRefresh, var1, RefreshResponse.class);
-            if (!var2.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
+            if (!var2.getClientToken().equals(this.clientToken)) {
                throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
             } else {
                if (var2.getSelectedProfile() != null) {
                   this.setUserType(var2.getSelectedProfile().isLegacy() ? UserType.LEGACY : UserType.MOJANG);
                } else if (ArrayUtils.isNotEmpty((Object[])var2.getAvailableProfiles())) {
@@ -160,11 +162,11 @@
          }
       }
    }
 
    protected boolean checkTokenValidity() throws AuthenticationException {
-      ValidateRequest var1 = new ValidateRequest(this);
+      ValidateRequest var1 = new ValidateRequest(this.getAuthenticatedToken(), this.clientToken);
 
       try {
          this.getAuthenticationService().makeRequest(this.routeValidate, var1, Response.class);
          return true;
       } catch (AuthenticationException var3) {
@@ -195,13 +197,13 @@
       if (!this.isLoggedIn()) {
          throw new AuthenticationException("Cannot change game profile whilst not logged in");
       } else if (this.getSelectedProfile() != null) {
          throw new AuthenticationException("Cannot change game profile. You must log out and back in.");
       } else if (var1 != null && ArrayUtils.contains(this.profiles, var1)) {
-         RefreshRequest var2 = new RefreshRequest(this, var1);
+         RefreshRequest var2 = new RefreshRequest(this.getAuthenticatedToken(), this.clientToken, var1);
          RefreshResponse var3 = (RefreshResponse)this.getAuthenticationService().makeRequest(this.routeRefresh, var2, RefreshResponse.class);
-         if (!var3.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
+         if (!var3.getClientToken().equals(this.clientToken)) {
             throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
          } else {
             this.isOnline = true;
             this.accessToken = var3.getAccessToken();
             this.setSelectedProfile(var3.getSelectedProfile());
@@ -238,11 +240,11 @@
    public Agent getAgent() {
       return this.agent;
    }
 
    public String toString() {
-      return "YggdrasilAuthenticationService{agent=" + this.agent + ", profiles=" + Arrays.toString(this.profiles) + ", selectedProfile=" + this.getSelectedProfile() + ", username='" + this.getUsername() + '\'' + ", isLoggedIn=" + this.isLoggedIn() + ", userType=" + this.getUserType() + ", canPlayOnline=" + this.canPlayOnline() + ", accessToken='" + this.accessToken + '\'' + ", clientToken='" + this.getAuthenticationService().getClientToken() + '\'' + '}';
+      return "YggdrasilAuthenticationService{agent=" + this.agent + ", profiles=" + Arrays.toString(this.profiles) + ", selectedProfile=" + this.getSelectedProfile() + ", username='" + this.getUsername() + '\'' + ", isLoggedIn=" + this.isLoggedIn() + ", userType=" + this.getUserType() + ", canPlayOnline=" + this.canPlayOnline() + ", accessToken='" + this.accessToken + '\'' + ", clientToken='" + this.clientToken + '\'' + '}';
    }
 
    public YggdrasilAuthenticationService getAuthenticationService() {
       return (YggdrasilAuthenticationService)super.getAuthenticationService();
    }
